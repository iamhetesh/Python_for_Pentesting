import pandas as pd
import numpy as np
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, accuracy_score, recall_score, f1_score, precision_score
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.neural_network import MLPClassifier

def final_result(mal_test, predict):
    print("Accuracy Score = %.4f" %accuracy_score(mal_test, predict))
    print("Precision Score = %.4f" %precision_score(mal_test, predict, average='macro'))
    print("Recall_Score = %.4f" %recall_score(mal_test, predict, average='macro'))
    print("F1_Score = %.4f" %f1_score(mal_test, predict, average='macro'))
    conf_mat = confusion_matrix(mal_test, predict)
    print("Confusion Matrix: \n", conf_mat)


if __name__ == "__main__":
    malData = pd.read_csv(r"/path/to/dataset", sep= ",") #The dataset should have '57' columns with different sample attributes and characteristics 
    features = malData.drop(['columns'], axis=1).values #Dropping unnecessary columns from the dataset
    target = malData['malware or legitimate column'].values # The target variable is used to train the machine learning models to predict whether a given file is benign or malicious based on its features.
    new_features = LabelEncoder().fit_transform(features.ravel()).reshape(*features.shape)
    label = LabelEncoder().fit_transform(target)
    normalized_features = StandardScaler().fit_transform(new_features)
    x_train, x_test, y_train, y_test = train_test_split(normalized_features, label, test_size=0.25, random_state=0)
    print("########################--------DECISION_TREES-------#######################################")
    trees = DecisionTreeClassifier()
    trees.fit(x_train, y_train)
    prediction = trees.predict(x_test)
    final_result(y_test, prediction)
    print("########################-----LOGISTIC_REGRESSION-----#######################################")
    logreg = LogisticRegression()
    logreg.fit(x_train, y_train)
    prediction = logreg.predict(x_test)
    final_result(y_test, prediction)
    print("#########################-----RANDOM_FOREST-----############################################")
    forest = RandomForestClassifier()
    forest.fit(x_train, y_train)
    prediction = forest.predict(x_test)
    final_result(y_test, prediction)
    print("###########################-----Neural_Network-----##########################################")
    neural = MLPClassifier(hidden_layer_sizes=(10, 10), max_iter=1000, random_state=42)
    neural.fit(x_train, y_train)
    prediction = neural.predict(x_test)
    final_result(y_test, prediction)
